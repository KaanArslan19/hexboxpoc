/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface IAutomationRegistryConsumerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFunds"
      | "cancelUpkeep"
      | "getBalance"
      | "getMinBalance"
      | "pauseUpkeep"
      | "unpauseUpkeep"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFunds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export interface IAutomationRegistryConsumer extends BaseContract {
  connect(runner?: ContractRunner | null): IAutomationRegistryConsumer;
  waitForDeployment(): Promise<this>;

  interface: IAutomationRegistryConsumerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFunds: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelUpkeep: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getBalance: TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  getMinBalance: TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  pauseUpkeep: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  unpauseUpkeep: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  withdrawFunds: TypedContractMethod<
    [id: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFunds"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelUpkeep"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinBalance"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pauseUpkeep"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpauseUpkeep"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [id: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}

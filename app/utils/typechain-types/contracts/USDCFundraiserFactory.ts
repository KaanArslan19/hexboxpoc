/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ProductConfigStruct = {
  productId: BigNumberish;
  price: BigNumberish;
  supplyLimit: BigNumberish;
};

export type ProductConfigStructOutput = [
  productId: bigint,
  price: bigint,
  supplyLimit: bigint
] & { productId: bigint; price: bigint; supplyLimit: bigint };

export interface USDCFundraiserFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chainlinkRegistrar"
      | "chainlinkRegistrarSelector"
      | "chainlinkRegistry"
      | "createFundraiser"
      | "linkToken"
      | "owner"
      | "productTokenAddress"
      | "renounceOwnership"
      | "transferOwnership"
      | "usdcAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Debug"
      | "FundraiserCreated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chainlinkRegistrar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkRegistrarSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFundraiser",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      ProductConfigStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "linkToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "productTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "chainlinkRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkRegistrarSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFundraiser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundraiserCreatedEvent {
  export type InputTuple = [fundraiser: AddressLike, creator: AddressLike];
  export type OutputTuple = [fundraiser: string, creator: string];
  export interface OutputObject {
    fundraiser: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface USDCFundraiserFactory extends BaseContract {
  connect(runner?: ContractRunner | null): USDCFundraiserFactory;
  waitForDeployment(): Promise<this>;

  interface: USDCFundraiserFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chainlinkRegistrar: TypedContractMethod<[], [string], "view">;

  chainlinkRegistrarSelector: TypedContractMethod<[], [string], "view">;

  chainlinkRegistry: TypedContractMethod<[], [string], "view">;

  createFundraiser: TypedContractMethod<
    [
      beneficiaryWallet: AddressLike,
      feeWallet: AddressLike,
      fundingType: BigNumberish,
      minimumTarget: BigNumberish,
      deadline: BigNumberish,
      products: ProductConfigStruct[]
    ],
    [string],
    "nonpayable"
  >;

  linkToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  productTokenAddress: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chainlinkRegistrar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainlinkRegistrarSelector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainlinkRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createFundraiser"
  ): TypedContractMethod<
    [
      beneficiaryWallet: AddressLike,
      feeWallet: AddressLike,
      fundingType: BigNumberish,
      minimumTarget: BigNumberish,
      deadline: BigNumberish,
      products: ProductConfigStruct[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "linkToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "FundraiserCreated"
  ): TypedContractEvent<
    FundraiserCreatedEvent.InputTuple,
    FundraiserCreatedEvent.OutputTuple,
    FundraiserCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Debug(string)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "FundraiserCreated(address,address)": TypedContractEvent<
      FundraiserCreatedEvent.InputTuple,
      FundraiserCreatedEvent.OutputTuple,
      FundraiserCreatedEvent.OutputObject
    >;
    FundraiserCreated: TypedContractEvent<
      FundraiserCreatedEvent.InputTuple,
      FundraiserCreatedEvent.OutputTuple,
      FundraiserCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}

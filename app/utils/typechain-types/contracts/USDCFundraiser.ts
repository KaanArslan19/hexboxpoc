/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ProductConfigStruct = {
  productId: BigNumberish;
  price: BigNumberish;
  supplyLimit: BigNumberish;
};

export type ProductConfigStructOutput = [
  productId: bigint,
  price: bigint,
  supplyLimit: bigint
] & { productId: bigint; price: bigint; supplyLimit: bigint };

export interface USDCFundraiserInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProduct"
      | "beneficiaryWallet"
      | "checkUpkeep"
      | "claimRefund"
      | "deadline"
      | "deposit"
      | "deposits"
      | "emergencyWithdraw"
      | "feePercentage"
      | "feeWallet"
      | "finalize"
      | "finalized"
      | "fundingType"
      | "getProductIds"
      | "getStationUpkeepID"
      | "initializeChainlink"
      | "minimumTarget"
      | "owner"
      | "pause"
      | "paused"
      | "performUpkeep"
      | "productIds"
      | "productSoldCount"
      | "productToken"
      | "products"
      | "removeProduct"
      | "renounceOwnership"
      | "setProductPrice"
      | "tokenDeposits"
      | "totalRaised"
      | "transferOwnership"
      | "unpause"
      | "updateDeadline"
      | "updateFeePercentage"
      | "updateProductPrice"
      | "updateProductSupply"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Debug"
      | "DebugBytes"
      | "Deposit"
      | "EmergencyWithdraw"
      | "FeeUpdated"
      | "Finalized"
      | "ForwarderChanged"
      | "FundsReleased"
      | "OwnershipTransferred"
      | "Paused"
      | "ProductAdded"
      | "ProductPriceSet"
      | "ProductRemoved"
      | "ProductUpdated"
      | "Refund"
      | "Unpaused"
      | "UpkeepPerformed"
      | "UpkeepRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [ProductConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundingType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStationUpkeepID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChainlink",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTarget",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "productIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productSoldCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProductPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStationUpkeepID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeChainlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "productIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productSoldCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string, value: BigNumberish];
  export type OutputTuple = [message: string, value: bigint];
  export interface OutputObject {
    message: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugBytesEvent {
  export type InputTuple = [message: string, value: BytesLike];
  export type OutputTuple = [message: string, value: string];
  export interface OutputObject {
    message: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [depositor: string, amount: bigint, fee: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [newFeePercentage: BigNumberish];
  export type OutputTuple = [newFeePercentage: bigint];
  export interface OutputObject {
    newFeePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForwarderChangedEvent {
  export type InputTuple = [forwarder: AddressLike];
  export type OutputTuple = [forwarder: string];
  export interface OutputObject {
    forwarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [beneficiary: AddressLike, amount: BigNumberish];
  export type OutputTuple = [beneficiary: string, amount: bigint];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductAddedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    price: BigNumberish,
    supplyLimit: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    price: bigint,
    supplyLimit: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    price: bigint;
    supplyLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPriceSetEvent {
  export type InputTuple = [productId: BigNumberish, price: BigNumberish];
  export type OutputTuple = [productId: bigint, price: bigint];
  export interface OutputObject {
    productId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductRemovedEvent {
  export type InputTuple = [productId: BigNumberish];
  export type OutputTuple = [productId: bigint];
  export interface OutputObject {
    productId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductUpdatedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    price: BigNumberish,
    supplyLimit: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    price: bigint,
    supplyLimit: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    price: bigint;
    supplyLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    productId: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    amount: bigint,
    productId: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    productId: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpkeepPerformedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpkeepRegisteredEvent {
  export type InputTuple = [upkeepID: BigNumberish];
  export type OutputTuple = [upkeepID: bigint];
  export interface OutputObject {
    upkeepID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface USDCFundraiser extends BaseContract {
  connect(runner?: ContractRunner | null): USDCFundraiser;
  waitForDeployment(): Promise<this>;

  interface: USDCFundraiserInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProduct: TypedContractMethod<
    [product: ProductConfigStruct],
    [void],
    "nonpayable"
  >;

  beneficiaryWallet: TypedContractMethod<[], [string], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;

  claimRefund: TypedContractMethod<
    [productId: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  deadline: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [productId: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feePercentage: TypedContractMethod<[], [bigint], "view">;

  feeWallet: TypedContractMethod<[], [string], "view">;

  finalize: TypedContractMethod<[], [void], "nonpayable">;

  finalized: TypedContractMethod<[], [boolean], "view">;

  fundingType: TypedContractMethod<[], [bigint], "view">;

  getProductIds: TypedContractMethod<[], [bigint[]], "view">;

  getStationUpkeepID: TypedContractMethod<[], [bigint], "view">;

  initializeChainlink: TypedContractMethod<
    [registrationParams: BytesLike],
    [bigint],
    "nonpayable"
  >;

  minimumTarget: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  productIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  productSoldCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  productToken: TypedContractMethod<[], [string], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        productId: bigint;
        price: bigint;
        supplyLimit: bigint;
      }
    ],
    "view"
  >;

  removeProduct: TypedContractMethod<
    [productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setProductPrice: TypedContractMethod<
    [productId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenDeposits: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  totalRaised: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDeadline: TypedContractMethod<
    [newDeadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFeePercentage: TypedContractMethod<
    [newFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProductPrice: TypedContractMethod<
    [productId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProductSupply: TypedContractMethod<
    [productId: BigNumberish, supplyLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProduct"
  ): TypedContractMethod<[product: ProductConfigStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "beneficiaryWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<
    [productId: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [productId: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "fundingType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProductIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getStationUpkeepID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializeChainlink"
  ): TypedContractMethod<
    [registrationParams: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minimumTarget"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "productIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "productSoldCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "productToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        productId: bigint;
        price: bigint;
        supplyLimit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeProduct"
  ): TypedContractMethod<[productId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProductPrice"
  ): TypedContractMethod<
    [productId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenDeposits"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDeadline"
  ): TypedContractMethod<[newDeadline: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeePercentage"
  ): TypedContractMethod<
    [newFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductPrice"
  ): TypedContractMethod<
    [productId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductSupply"
  ): TypedContractMethod<
    [productId: BigNumberish, supplyLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "DebugBytes"
  ): TypedContractEvent<
    DebugBytesEvent.InputTuple,
    DebugBytesEvent.OutputTuple,
    DebugBytesEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Finalized"
  ): TypedContractEvent<
    FinalizedEvent.InputTuple,
    FinalizedEvent.OutputTuple,
    FinalizedEvent.OutputObject
  >;
  getEvent(
    key: "ForwarderChanged"
  ): TypedContractEvent<
    ForwarderChangedEvent.InputTuple,
    ForwarderChangedEvent.OutputTuple,
    ForwarderChangedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProductAdded"
  ): TypedContractEvent<
    ProductAddedEvent.InputTuple,
    ProductAddedEvent.OutputTuple,
    ProductAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPriceSet"
  ): TypedContractEvent<
    ProductPriceSetEvent.InputTuple,
    ProductPriceSetEvent.OutputTuple,
    ProductPriceSetEvent.OutputObject
  >;
  getEvent(
    key: "ProductRemoved"
  ): TypedContractEvent<
    ProductRemovedEvent.InputTuple,
    ProductRemovedEvent.OutputTuple,
    ProductRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ProductUpdated"
  ): TypedContractEvent<
    ProductUpdatedEvent.InputTuple,
    ProductUpdatedEvent.OutputTuple,
    ProductUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpkeepPerformed"
  ): TypedContractEvent<
    UpkeepPerformedEvent.InputTuple,
    UpkeepPerformedEvent.OutputTuple,
    UpkeepPerformedEvent.OutputObject
  >;
  getEvent(
    key: "UpkeepRegistered"
  ): TypedContractEvent<
    UpkeepRegisteredEvent.InputTuple,
    UpkeepRegisteredEvent.OutputTuple,
    UpkeepRegisteredEvent.OutputObject
  >;

  filters: {
    "Debug(string,uint256)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "DebugBytes(string,bytes)": TypedContractEvent<
      DebugBytesEvent.InputTuple,
      DebugBytesEvent.OutputTuple,
      DebugBytesEvent.OutputObject
    >;
    DebugBytes: TypedContractEvent<
      DebugBytesEvent.InputTuple,
      DebugBytesEvent.OutputTuple,
      DebugBytesEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EmergencyWithdraw(address,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "FeeUpdated(uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "Finalized()": TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
    Finalized: TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;

    "ForwarderChanged(address)": TypedContractEvent<
      ForwarderChangedEvent.InputTuple,
      ForwarderChangedEvent.OutputTuple,
      ForwarderChangedEvent.OutputObject
    >;
    ForwarderChanged: TypedContractEvent<
      ForwarderChangedEvent.InputTuple,
      ForwarderChangedEvent.OutputTuple,
      ForwarderChangedEvent.OutputObject
    >;

    "FundsReleased(address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProductAdded(uint256,uint256,uint256)": TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;
    ProductAdded: TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;

    "ProductPriceSet(uint256,uint256)": TypedContractEvent<
      ProductPriceSetEvent.InputTuple,
      ProductPriceSetEvent.OutputTuple,
      ProductPriceSetEvent.OutputObject
    >;
    ProductPriceSet: TypedContractEvent<
      ProductPriceSetEvent.InputTuple,
      ProductPriceSetEvent.OutputTuple,
      ProductPriceSetEvent.OutputObject
    >;

    "ProductRemoved(uint256)": TypedContractEvent<
      ProductRemovedEvent.InputTuple,
      ProductRemovedEvent.OutputTuple,
      ProductRemovedEvent.OutputObject
    >;
    ProductRemoved: TypedContractEvent<
      ProductRemovedEvent.InputTuple,
      ProductRemovedEvent.OutputTuple,
      ProductRemovedEvent.OutputObject
    >;

    "ProductUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
    ProductUpdated: TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;

    "Refund(address,uint256,uint256,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpkeepPerformed()": TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;
    UpkeepPerformed: TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;

    "UpkeepRegistered(uint256)": TypedContractEvent<
      UpkeepRegisteredEvent.InputTuple,
      UpkeepRegisteredEvent.OutputTuple,
      UpkeepRegisteredEvent.OutputObject
    >;
    UpkeepRegistered: TypedContractEvent<
      UpkeepRegisteredEvent.InputTuple,
      UpkeepRegisteredEvent.OutputTuple,
      UpkeepRegisteredEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockAutomationRegistrarInterface extends Interface {
  getFunction(nameOrSignature: "register"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RegistrationRequested"): EventFragment;

  encodeFunctionData(
    functionFragment: "register",
    values: [
      string,
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
}

export namespace RegistrationRequestedEvent {
  export type InputTuple = [
    name: string,
    encryptedEmail: BytesLike,
    upkeepContract: AddressLike,
    gasLimit: BigNumberish,
    adminAddress: AddressLike,
    checkData: BytesLike,
    amount: BigNumberish,
    source: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    encryptedEmail: string,
    upkeepContract: string,
    gasLimit: bigint,
    adminAddress: string,
    checkData: string,
    amount: bigint,
    source: bigint
  ];
  export interface OutputObject {
    name: string;
    encryptedEmail: string;
    upkeepContract: string;
    gasLimit: bigint;
    adminAddress: string;
    checkData: string;
    amount: bigint;
    source: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockAutomationRegistrar extends BaseContract {
  connect(runner?: ContractRunner | null): MockAutomationRegistrar;
  waitForDeployment(): Promise<this>;

  interface: MockAutomationRegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  register: TypedContractMethod<
    [
      name: string,
      encryptedEmail: BytesLike,
      upkeepContract: AddressLike,
      gasLimit: BigNumberish,
      adminAddress: AddressLike,
      checkData: BytesLike,
      amount: BigNumberish,
      source: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      name: string,
      encryptedEmail: BytesLike,
      upkeepContract: AddressLike,
      gasLimit: BigNumberish,
      adminAddress: AddressLike,
      checkData: BytesLike,
      amount: BigNumberish,
      source: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "RegistrationRequested"
  ): TypedContractEvent<
    RegistrationRequestedEvent.InputTuple,
    RegistrationRequestedEvent.OutputTuple,
    RegistrationRequestedEvent.OutputObject
  >;

  filters: {
    "RegistrationRequested(string,bytes,address,uint32,address,bytes,uint96,uint8)": TypedContractEvent<
      RegistrationRequestedEvent.InputTuple,
      RegistrationRequestedEvent.OutputTuple,
      RegistrationRequestedEvent.OutputObject
    >;
    RegistrationRequested: TypedContractEvent<
      RegistrationRequestedEvent.InputTuple,
      RegistrationRequestedEvent.OutputTuple,
      RegistrationRequestedEvent.OutputObject
    >;
  };
}

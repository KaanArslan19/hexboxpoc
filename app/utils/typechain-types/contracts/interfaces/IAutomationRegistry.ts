/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IAutomationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "cancelUpkeep" | "getUpkeep" | "register" | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      string,
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUpkeep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export interface IAutomationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IAutomationRegistry;
  waitForDeployment(): Promise<this>;

  interface: IAutomationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelUpkeep: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getUpkeep: TypedContractMethod<
    [id: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        target: string;
        executeGas: bigint;
        checkData: string;
        balance: bigint;
        lastKeeper: string;
        admin: string;
        maxValidBlocknumber: bigint;
        amountSpent: bigint;
        paused: boolean;
        offchainConfig: string;
      }
    ],
    "view"
  >;

  register: TypedContractMethod<
    [
      name: string,
      encryptedEmail: BytesLike,
      upkeepContract: AddressLike,
      gasLimit: BigNumberish,
      adminAddress: AddressLike,
      checkData: BytesLike,
      amount: BigNumberish,
      source: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [id: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelUpkeep"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUpkeep"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        target: string;
        executeGas: bigint;
        checkData: string;
        balance: bigint;
        lastKeeper: string;
        admin: string;
        maxValidBlocknumber: bigint;
        amountSpent: bigint;
        paused: boolean;
        offchainConfig: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      name: string,
      encryptedEmail: BytesLike,
      upkeepContract: AddressLike,
      gasLimit: BigNumberish,
      adminAddress: AddressLike,
      checkData: BytesLike,
      amount: BigNumberish,
      source: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [id: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
